app.py
from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file
import sqlite3
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Keep this secure

# Configure upload folder
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'txt'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Create uploads directory if it doesn't exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_db_connection():
    conn = sqlite3.connect('/home/ubuntu/users.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            firstname TEXT NOT NULL,
            lastname TEXT NOT NULL,
            email TEXT NOT NULL,
            address TEXT NOT NULL,
            uploaded_file TEXT,
            word_count INTEGER
        )
    ''')
    conn.commit()
    conn.close()

def count_words(file_path):
    try:
        with open(file_path, 'r') as file:
            text = file.read()
            words = text.split()
            return len(words)
    except Exception as e:
        print(f"Error counting words: {e}")
        return 0

@app.route('/')
def home():
    return render_template('register.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        firstname = request.form['firstname']
        lastname = request.form['lastname']
        email = request.form['email']
        address = request.form['address']

        try:
            conn = get_db_connection()
            c = conn.cursor()
            c.execute("SELECT * FROM users WHERE username=?", (username,))
            if c.fetchone():
                flash("Username already exists")
                return render_template('register.html')

            c.execute("""
                INSERT INTO users (username, password, firstname, lastname, email, address, uploaded_file, word_count)
                VALUES (?, ?, ?, ?, ?, ?, NULL, NULL)
            """, (username, password, firstname, lastname, email, address))

            conn.commit()
            conn.close()
            return redirect(url_for('login'))
        except Exception as e:
            flash("Error in registration. Please try again.")
            return render_template('register.html')

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = c.fetchone()
        conn.close()

        if user:
            session['username'] = username
            return redirect(url_for('profile'))
        else:
            flash("Invalid username or password")
            return render_template('login.html')

    return render_template('login.html')

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST' and 'file' in request.files:
        file = request.files['file']
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            word_count = count_words(filepath)

            conn = get_db_connection()
            c = conn.cursor()
            c.execute("UPDATE users SET uploaded_file = ?, word_count = ? WHERE username = ?",
                      (filename, word_count, session['username']))
            conn.commit()
            conn.close()

            flash("File uploaded successfully!")
            return redirect(url_for('profile'))

        else:
            flash("Invalid file type. Please upload a .txt file.")

    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=?", (session['username'],))
    user = c.fetchone()
    conn.close()

    if user:
        return render_template('profile.html', user=user)
    else:
        return redirect(url_for('login'))

@app.route('/download_file')
def download_file():
    if 'username' not in session:
        return redirect(url_for('login'))

    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT uploaded_file FROM users WHERE username=?", (session['username'],))
    result = c.fetchone()
    conn.close()

    if result and result['uploaded_file']:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], result['uploaded_file'])
        return send_file(filepath, as_attachment=True)
    else:
        flash("No file available for download")
        return redirect(url_for('profile'))

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

if __name__ == "__main__":
    init_db()
    app.run(debug=True, host='0.0.0.0', port=5000)
